name: Deploy to GitHub Pages and Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Prepare files for server deployment
        run: |
          # maintenance 페이지를 index.html 복사본으로 만들고 아카이브 생성
          cp dist/index.html dist/maintenance.html
          tar -czf dist.tar.gz -C dist .

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          commit_message: "🔄 Deploy to GitHub Pages"

      - name: Upload archive to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist.tar.gz"
          target: "/tmp/dist.tar.gz"
          # strip_components: 0 옵션은 tar 추출 시 상위 디렉터리 레벨 유지
          strip_components: 0

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            # 1) maintenance 디렉터리로 이동 (절대경로는 이 한 번만)
            cd /srv/lshworkspace/nginx/share/maintenance

            # 2) 상대경로 변수 선언
            RELEASES_DIR="releases"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            NEW_RELEASE="$RELEASES_DIR/$TIMESTAMP"

            # 3) 새 릴리즈 디렉터리 생성 및 압축 해제
            mkdir -p "$NEW_RELEASE"
            tar -xzf /tmp/dist.tar.gz -C "$NEW_RELEASE"
            rm -f /tmp/dist.tar.gz

            # 4) current 심볼릭 링크를 상대경로로 원자적 업데이트
            #    (maintenance/current → maintenance/releases/<timestamp>)
            ln -sfn "$NEW_RELEASE" current

            # 5) 로그 출력
            echo "✅ New release created at: $NEW_RELEASE"
            echo "ℹ️ 'current' → $NEW_RELEASE"
